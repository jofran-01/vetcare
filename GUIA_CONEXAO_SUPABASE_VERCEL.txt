# üöÄ GUIA COMPLETO: CONECTANDO PROJETO TCC VETERIN√ÅRIO AO SUPABASE E VERCEL

## üìã √çNDICE
1. [Configura√ß√£o do Supabase](#configura√ß√£o-do-supabase)
2. [Configura√ß√£o do Projeto](#configura√ß√£o-do-projeto)
3. [Deploy na Vercel](#deploy-na-vercel)
4. [Testando a Conex√£o](#testando-a-conex√£o)
5. [Solu√ß√£o de Problemas](#solu√ß√£o-de-problemas)

---

## üóÑÔ∏è CONFIGURA√á√ÉO DO SUPABASE

### Passo 1: Criar Conta e Projeto
1. Acesse [supabase.com](https://supabase.com)
2. Clique em "Start your project" ou "Sign Up"
3. Fa√ßa login com GitHub, Google ou email
4. Clique em "New Project"
5. Escolha sua organiza√ß√£o (ou crie uma nova)
6. Preencha:
   - **Name**: `projeto-tcc-veterinario`
   - **Database Password**: Crie uma senha forte (ANOTE ESTA SENHA!)
   - **Region**: Escolha a mais pr√≥xima (ex: South America - S√£o Paulo)
7. Clique em "Create new project"
8. Aguarde alguns minutos para o projeto ser criado

### Passo 2: Executar o Script SQL
1. No painel do Supabase, v√° para **"SQL Editor"** (√≠cone de c√≥digo no menu lateral)
2. Clique em **"New query"**
3. Abra o arquivo `database/schema.sql` que foi criado
4. **COPIE TODO O CONTE√öDO** do arquivo e cole no editor SQL
5. Clique em **"Run"** (bot√£o verde no canto inferior direito)
6. Aguarde a execu√ß√£o (pode levar alguns segundos)
7. Se aparecer "Success. No rows returned", est√° correto!

### Passo 3: Verificar Tabelas Criadas
1. V√° para **"Table Editor"** (√≠cone de tabela no menu lateral)
2. Voc√™ deve ver todas as tabelas criadas:
   - usuarios_tutores
   - usuarios_clinicas
   - animais
   - agendamentos
   - consultas
   - vacinas
   - contatos
   - configuracoes_usuario
   - itens

### Passo 4: Obter Credenciais de Conex√£o
1. V√° para **"Settings"** ‚Üí **"API"**
2. **ANOTE ESTAS INFORMA√á√ïES** (voc√™ precisar√° delas):
   - **Project URL**: `https://[seu-projeto-id].supabase.co`
   - **anon public key**: `eyJ...` (chave longa que come√ßa com eyJ)
   - **service_role key**: `eyJ...` (chave secreta - NUNCA exponha publicamente)

---

## ‚öôÔ∏è CONFIGURA√á√ÉO DO PROJETO

### Passo 1: Criar Arquivo .env
1. Na raiz do seu projeto, crie um arquivo chamado `.env`
2. Adicione as seguintes vari√°veis (substitua pelos seus valores):

```env
# Configura√ß√µes do Supabase
SUPABASE_URL=https://[seu-projeto-id].supabase.co
SUPABASE_ANON_KEY=eyJ[sua-chave-anon-publica]
SUPABASE_SERVICE_KEY=eyJ[sua-chave-service-role-secreta]

# Configura√ß√µes da Aplica√ß√£o
APP_ENV=production
APP_DEBUG=false
APP_URL=https://[seu-dominio].vercel.app

# Configura√ß√µes para QR Code
QR_CODE_BASE_URL=https://[seu-dominio].vercel.app/animal/

# Configura√ß√µes de Email (opcional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=seu-email@gmail.com
SMTP_PASS=sua-senha-app

# Configura√ß√µes de Upload (opcional)
UPLOAD_MAX_SIZE=5242880
ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf
```

### Passo 2: Criar .env.example
1. Copie o arquivo `.env` para `.env.example`
2. **REMOVA TODOS OS VALORES REAIS**, deixando apenas as chaves:

```env
# Configura√ß√µes do Supabase
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_KEY=

# Configura√ß√µes da Aplica√ß√£o
APP_ENV=production
APP_DEBUG=false
APP_URL=

# Configura√ß√µes para QR Code
QR_CODE_BASE_URL=

# Configura√ß√µes de Email (opcional)
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASS=

# Configura√ß√µes de Upload (opcional)
UPLOAD_MAX_SIZE=5242880
ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf
```

### Passo 3: Atualizar .gitignore
Certifique-se de que o arquivo `.gitignore` cont√©m:
```
.env
node_modules/
.vercel/
*.log
.DS_Store
```

---

## üöÄ DEPLOY NA VERCEL

### Passo 1: Preparar o Reposit√≥rio GitHub
1. Crie um reposit√≥rio no GitHub (ex: `projeto-tcc-veterinario`)
2. Fa√ßa push do seu c√≥digo:
```bash
git init
git add .
git commit -m "Initial commit - Projeto TCC Veterin√°rio"
git branch -M main
git remote add origin https://github.com/[seu-usuario]/projeto-tcc-veterinario.git
git push -u origin main
```

### Passo 2: Conectar √† Vercel
1. Acesse [vercel.com](https://vercel.com)
2. Fa√ßa login com sua conta GitHub
3. Clique em **"New Project"**
4. Selecione o reposit√≥rio `projeto-tcc-veterinario`
5. Clique em **"Import"**

### Passo 3: Configurar Vari√°veis de Ambiente na Vercel
1. Na p√°gina de configura√ß√£o do projeto, v√° para **"Environment Variables"**
2. Adicione TODAS as vari√°veis do seu arquivo `.env`:
   - **Name**: `SUPABASE_URL` | **Value**: `https://[seu-projeto-id].supabase.co`
   - **Name**: `SUPABASE_ANON_KEY` | **Value**: `eyJ[sua-chave-anon]`
   - **Name**: `SUPABASE_SERVICE_KEY` | **Value**: `eyJ[sua-chave-service]`
   - Continue para todas as outras vari√°veis...
3. Certifique-se de marcar todas para **Production**, **Preview** e **Development**

### Passo 4: Configurar Build Settings (se necess√°rio)
- **Framework Preset**: Other (ou detectado automaticamente)
- **Build Command**: `npm run build` (se usando Node.js)
- **Output Directory**: `dist` ou `build` (dependendo do seu setup)
- **Install Command**: `npm install`

### Passo 5: Deploy
1. Clique em **"Deploy"**
2. Aguarde o build e deploy (pode levar alguns minutos)
3. Quando conclu√≠do, voc√™ receber√° uma URL como: `https://projeto-tcc-veterinario.vercel.app`

---

## üß™ TESTANDO A CONEX√ÉO

### Teste 1: Verificar se o Site Carrega
1. Acesse a URL fornecida pela Vercel
2. Verifique se todas as p√°ginas carregam sem erro
3. Abra o console do navegador (F12) e verifique se n√£o h√° erros JavaScript

### Teste 2: Testar Conex√£o com Banco
1. Tente fazer um cadastro de tutor ou cl√≠nica
2. V√° ao Supabase ‚Üí Table Editor ‚Üí usuarios_tutores (ou usuarios_clinicas)
3. Verifique se o registro foi criado

### Teste 3: Testar Formul√°rio de Contato
1. Preencha o formul√°rio de contato no site
2. V√° ao Supabase ‚Üí Table Editor ‚Üí contatos
3. Verifique se a mensagem foi salva

### Teste 4: Verificar Logs
1. Na Vercel, v√° para **"Functions"** ‚Üí **"View Function Logs"**
2. Procure por erros de conex√£o ou SQL
3. No Supabase, v√° para **"Logs"** para ver queries executadas

---

## üîß SOLU√á√ÉO DE PROBLEMAS

### Problema: "Failed to connect to database"
**Solu√ß√µes:**
1. Verifique se as vari√°veis `SUPABASE_URL` e `SUPABASE_ANON_KEY` est√£o corretas
2. Confirme se o projeto Supabase est√° ativo (n√£o pausado)
3. Teste a conex√£o localmente primeiro

### Problema: "Invalid API key"
**Solu√ß√µes:**
1. Regenere as chaves API no Supabase (Settings ‚Üí API ‚Üí Reset)
2. Atualize as vari√°veis de ambiente na Vercel
3. Fa√ßa um novo deploy

### Problema: "Table doesn't exist"
**Solu√ß√µes:**
1. Execute novamente o script SQL no Supabase
2. Verifique se todas as tabelas foram criadas em Table Editor
3. Confirme se est√° usando o banco correto

### Problema: "CORS error"
**Solu√ß√µes:**
1. No Supabase, v√° para Settings ‚Üí API ‚Üí CORS
2. Adicione sua URL da Vercel na lista de origens permitidas
3. Adicione tamb√©m `localhost:3000` para desenvolvimento local

### Problema: Deploy falha na Vercel
**Solu√ß√µes:**
1. Verifique os logs de build na Vercel
2. Confirme se todas as depend√™ncias est√£o no package.json
3. Verifique se o comando de build est√° correto

### Problema: Vari√°veis de ambiente n√£o funcionam
**Solu√ß√µes:**
1. Confirme se as vari√°veis est√£o definidas para todos os ambientes (Production, Preview, Development)
2. Fa√ßa um redeploy ap√≥s adicionar/alterar vari√°veis
3. Use `console.log(process.env.SUPABASE_URL)` para debug

---

## üìù COMANDOS √öTEIS

### Para desenvolvimento local:
```bash
# Instalar depend√™ncias
npm install

# Executar localmente
npm run dev

# Build para produ√ß√£o
npm run build
```

### Para atualizar o projeto:
```bash
# Fazer altera√ß√µes no c√≥digo
git add .
git commit -m "Descri√ß√£o das altera√ß√µes"
git push

# A Vercel far√° deploy automaticamente
```

---

## üîê SEGURAN√áA

### ‚ö†Ô∏è IMPORTANTE - NUNCA FA√áA ISSO:
- Nunca commite o arquivo `.env` no Git
- Nunca exponha a `SUPABASE_SERVICE_KEY` no frontend
- Nunca coloque credenciais em c√≥digo JavaScript p√∫blico

### ‚úÖ BOAS PR√ÅTICAS:
- Use apenas `SUPABASE_ANON_KEY` no frontend
- Mantenha `SUPABASE_SERVICE_KEY` apenas no backend
- Use Row Level Security (RLS) no Supabase para maior seguran√ßa
- Monitore logs regularmente

---

## üìû SUPORTE

Se encontrar problemas:
1. Verifique os logs da Vercel e Supabase
2. Consulte a documenta√ß√£o oficial:
   - [Supabase Docs](https://supabase.com/docs)
   - [Vercel Docs](https://vercel.com/docs)
3. Teste localmente antes de fazer deploy

---

**üéâ Pronto! Seu projeto est√° conectado ao Supabase e deployado na Vercel!**

Agora tudo que for inserido no seu site ser√° automaticamente salvo no banco de dados do Supabase, e voc√™ pode visualizar os dados em tempo real no painel administrativo do Supabase.

